
// func FindAndKillOldProcessesDarwin() error {
// 	defer func() {
// 		if r := recover(); r != nil {
// 			log.Println(r, string(debug.Stack()))
// 		}

// 	}()

// 	CreateLog("", "Current Process ID: ", os.Getpid())

// 	processes, _ := process.Processes()
// 	for _, process := range processes {
// 		name, _ := process.Name()

// 		if strings.Contains(name, CLIENT_PROCESS_NAME) {
// 			log.Println(name)
// 			if process.Pid != int32(os.Getpid()) {
// 				CreateLog("", "Killing remnant process by ID: ", process.Pid, " Name: ", name)
// 				err := process.Kill()
// 				if err != nil {
// 					err = process.Terminate()
// 					if err != nil {
// 						CreateErrorLog("", "Error killing remnant process by ID: ", process.Pid, " msg: ", err)
// 						return err
// 					}
// 					continue
// 				}

// 				time.Sleep(1 * time.Second)
// 			}

// 		}
// 	}
// 	return nil
// }

// func FindAndKillOldProcessesUnix() error {
// 	defer func() {
// 		if r := recover(); r != nil {
// 			log.Println(r, string(debug.Stack()))
// 		}

// 	}()

// 	CreateLog("", "Current Process ID: ", os.Getpid())

// 	processes, _ := process.Processes()
// 	for _, process := range processes {
// 		name, _ := process.Name()

// 		if strings.Contains(name, CLIENT_PROCESS_NAME) {
// 			log.Println(name)
// 			if process.Pid != int32(os.Getpid()) {
// 				CreateLog("", "Killing remnant process by ID: ", process.Pid, " Name: ", name)
// 				err := process.Kill()
// 				if err != nil {
// 					err = process.Terminate()
// 					if err != nil {
// 						CreateErrorLog("", "Error killing remnant process by ID: ", process.Pid, " msg: ", err)
// 						return err
// 					}
// 					continue
// 				}

// 				time.Sleep(1 * time.Second)
// 			}

// 		}
// 	}
// 	return nil
// }

func FindAndKillOldProcessesWINDOWS() {
	h, e := windows.CreateToolhelp32Snapshot(windows.TH32CS_SNAPPROCESS, 0)
	if e != nil {
		return
	}
	p := windows.ProcessEntry32{Size: 568}
	CreateLog("", "Current Process ID: ", os.Getpid())
	didKillProcess := false

	for {
		e := windows.Process32Next(h, &p)
		if e != nil {
			break
		}
		// if windows.UTF16ToString(p.ExeFile[:]) == "nicelandVPN-service.exe" {
		if strings.Contains(windows.UTF16ToString(p.ExeFile[:]), "nicelandVPN-service") {
			if p.ProcessID != uint32(os.Getpid()) {
				didKillProcess = true

				process, err := os.FindProcess(int(p.ProcessID))
				if err != nil {
					CreateErrorLog("", "Error killing remnant process by ID: ", p.ProcessID, " msg: ", err)
					continue
				}
				err = process.Kill()
				if err != nil {
					_ = process.Signal(syscall.SIGQUIT)
					_ = process.Signal(syscall.SIGTERM)
					CreateErrorLog("", "Error killing remnant process by ID: ", p.ProcessID, " msg: ", err)
				}

				// CreateLog("loader", "NOT SAME PID: ", p.ProcessID, windows.UTF16ToString(p.ExeFile[:]))
			}
		}
	}

	if didKillProcess {
		time.Sleep(1 * time.Second)
	}
}
